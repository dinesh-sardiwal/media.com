<?php
/**
 * Custom module file.
 */

/**
 * Implements hook_permission().
 */
function custom_permission() {
  return array(
    'admin user active page' => array(
      'title' => t('Access user active page'),
      'description' => t('Display all user information and admin user will be active user'),
    ),
  );
}

/**
 * Implements of hook_menu().
 */
function custom_menu(){
  $items = array();

  $itmes['members-info'] = array(
    'title' => t('Registered Member List'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('active_users_list'),
    'access arguments' => array('admin user active page'),
    'type' => MENU_CALLBACK,
  );

  $itmes['members-movies/%/%'] = array(
    'title' => t('Member Movies List'),
    'page callback' => 'member_movies_list',
    'access arguments' => array('admin user active page'),
    'type' => MENU_CALLBACK,
  );

  $itmes['members-songs/%/%'] = array(
    'title' => t('Member Songs List'),
    'page callback' => 'member_songs_list',
    'access arguments' => array('admin user active page'),
    'type' => MENU_CALLBACK,
  );

  $itmes['media-detail'] = array(
    'title' => t('Media Details'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_media_details'),
    'access arguments' => array('admin user active page'),
    'type' => MENU_CALLBACK,
  );

  return $itmes;
}

/**
 * Member information Callback.
 */
function active_users_list() {

  $form = array();
  $i = 1;
  $field_sex = field_info_field('field_sex');
  $sex_options_values = list_allowed_values($field_sex); 
  array_unshift($sex_options_values, "-Select");
  extract($_GET);

   // Table Header. 
  $header = array(
    'S/No',
    array('data' => 'First Name', 'field' => 'fn.field_first_name_value', 'sort' => 'ASC'),
    array('data' => 'Last Name', 'field' => 'field_last_name_value', 'sort' => 'ASC'),
    array('data' => 'Sex', 'field' => 'sex.field_sex_value', 'sort' => 'ASC'),
    'View all Movies',
    'View all Songs'
  );

  //$users = entity_load('user');
  $userdata = array();

  //Custom Query 
 /* SELECT count( n.uid ) AS counts, n.nid, first_name.field_first_name_value, last_name.field_last_name_value, sex.field_sex_value, u.uid
FROM users AS u
LEFT JOIN node AS n ON ( u.uid = n.uid )
AND (
n.type = 'movie_information'
)
JOIN field_data_field_first_name AS first_name ON ( u.uid = first_name.entity_id )
JOIN field_data_field_last_name AS last_name ON ( u.uid = last_name.entity_id )
JOIN field_data_field_sex AS sex ON ( u.uid = sex.entity_id )
GROUP BY u.uid
ORDER BY counts DESC */

  $query = db_select('users','u')->extend('TableSort');
  $query->leftJoin('node', 'n', '(u.uid = n.uid AND n.type = :bundle)', array(':bundle' => 'movie_information'));
  $query->join('field_data_field_first_name', 'fn', 'u.uid = fn.entity_id');
  $query->join('field_data_field_last_name', 'ln', 'u.uid = ln.entity_id');
  $query->join('field_data_field_sex', 'sex', 'u.uid = sex.entity_id');
  $query->fields('fn',array('field_first_name_value'));
  $query->fields('ln',array('field_last_name_value'));
  $query->fields('u',array('uid'));
  $query->fields('n',array('uid'));
  $query->fields('sex',array('field_sex_value'));
  $query->condition('u.uid', 0, '!=');
  $query->condition('u.uid', 1, '!=');

  if (isset($first_name) && !empty($first_name)) {
    $query->condition('fn.field_first_name_value', '%' . db_like($first_name) . '%', 'LIKE');
  } 

  if (isset($last_name) && !empty($last_name)) {
    $query->condition('ln.field_last_name_value', '%' . db_like($last_name) . '%', 'LIKE');
  }

  if (isset($sex) && !empty($sex)) {
    $query->condition('sex.field_sex_value', $sex, '=');
  }

  if (empty($_GET['sort'])) {
    $query->addExpression('COUNT(n.uid)', 'counts');
    $query->groupBy('u.uid');
    $query->orderBy('counts', 'DESC');
  }
    
  $result = $query->extend('PagerDefault')
    ->limit(5)
    ->orderByHeader($header)
    ->execute()
    ->fetchAll();

  foreach ($result as $row) {
    $user_load = user_load($row->uid);
    $userdata[$row->uid] = array(
      $i,
      $row->field_first_name_value,
      $row->field_last_name_value,
      $row->field_sex_value,
      users_rolewise_link($user_load, 'members-movies'),
      users_rolewise_link($user_load, 'members-songs'),
    );
    $i++;
  }
  // ignore uid 0 and 1.
  //$ignore_uid = array(0, 1);
  /*
  foreach ($users as $user_id => $user_data) {
    if(!in_array($user_id, $ignore_uid)) {
      $userdata[$user_id] = array(
        $i,
        field_key_check($user_data, 'field_first_name'),
        field_key_check($user_data, 'field_last_name'),
        field_key_check($user_data, 'field_sex'),
        users_rolewise_link($user_data, 'members-movies'),
        users_rolewise_link($user_data, 'members-songs'),
      );
      $i++;
      //drupal_set_message('<pre>'.print_r($user_data,TRUE));
    }
  }
*/
  $form['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#default_value' => isset($first_name) ? $first_name : '',
  );

  $form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#default_value' => isset($last_name) ? $last_name : '',
  );

  $form['sex'] = array(
    '#type' => 'select',
    '#title' => t('Sex'),
    '#options' => $sex_options_values,
    '#default_value' => isset($sex) ? $sex : '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['table'] = array(
    '#theme' => 'table',
    '#title' => t('Registered User list'),
    '#header' => $header,
    '#rows' => $userdata,
    '#empty' => t('No Records.'),
  );

  $form['pager'] = array(
    '#theme' => 'pager',
  );
  return $form;
}

/**
 *
 */
function active_users_list_submit($form,&$form_state) {
  $values = $form_state['values'];
  $first_name = $values['first_name'];
  $last_name = $values['last_name'];
  $sex = $values['sex'];
  
  $form_state['redirect'] = array(
    'members-info',
    array(
      'query' => array(
        'first_name' => $first_name,
        'last_name' => $last_name,
        'sex' => $sex,
      ),
    ),
  );
}

/**
 * Member Movies List callback.
 * member_movies_list().
 */
function member_movies_list() {

  // Query Build
  $result = custom_query_build('movie_information');
  $rows = array();
  if (isset($result['node'])) {
    $i = 1;
    
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);

    foreach ($nodes as $key => $value) {
      $node_path = drupal_get_path_alias("node/$value->nid");
      $rows[$value->nid] = array(
        $i,
        l($value->title,$node_path),
        field_key_check($value, 'field_movie_rates'),
        field_key_check($value, 'body'),
      );
      $i++;
    }
  }

  // Table Header. 
  $header = array(
    'S/No',
    array('data' => 'Movie name' , 'field' => 'field_first_name', 'sort' => 'ASC'),
    array('data' => 'Movie Rates' ,'field' => 'field_last_name', 'sort' => 'ASC'),
    array('data' => 'Description' , 'field' => 'field_sex', 'sort' => 'ASC'),
  );

  if (empty($rows)) {
    $rows = array(
      'empty' => array(
        'Sorry No Result Found',
      ),
    );
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    )
  );

  return $output;
}

/**
 * Member Songs List callback.
 * member_songs_list().
 */
function member_songs_list() {

  // Query Build
  $result = custom_query_build('songs_information');

  $rows = array();
  
  if (isset($result['node'])) {
    $stories = $result['node'];
    $i = 1;
    
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);

    foreach ($nodes as $key => $value) {
      $movies_nid = $value->field_movies ? $value->field_movies['und'][0]['nid'] : '';
      $movies_object = node_load($movies_nid);

      //get node path alias.
      $movies_node_path = drupal_get_path_alias("node/$movies_object->nid");
      $songs_node_path = drupal_get_path_alias("node/$value->nid");

      $fivestar = field_view_field('node', $value, 'field_five_star_rating',array(
        'label'=>'hidden',));
      
      $rows[$value->nid] = array(
        $i,
        l($movies_object->title,$movies_node_path),
        l($value->title,$songs_node_path),
        field_key_check($movies_object, 'field_movie_rates'),
        render($fivestar),
      );
     $i++;
    }
  }

  // Table Header. 
  $header = array(
    'S/No',
    'Movie',
    'Song Name',
    'Movie Rates',
    'Five star rating',
  );

  if (empty($rows)) {
    $rows = array(
      'empty' => array(
        'Sorry No Result Found',
      ),
    );
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => TRUE,
    )
  );

  return $output;
  
}

/**
 * Field value check.
 */
function field_key_check($object, $field_key) {
  $object_clone = $object->$field_key;
  return $object->$field_key ? $object_clone['und'][0]['value'] : '';
}

/**
 * argument based generate query.
 * custom_query_build().
 */
function custom_query_build($bundle_name) {
  $arg = arg(1);
  $user_uid = arg(2);

  $query = new EntityFieldQuery;

  switch ($arg) {
    case 'actor':
      $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $bundle_name)
        ->fieldCondition('field_actor', 'uid', $user_uid, '=')
        ->execute();
      break;

    case 'actress':
      $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $bundle_name)
        ->fieldCondition('field_actress', 'uid', $user_uid, '=')
        ->execute();
      break;

    case 'producer':
      $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $bundle_name)
        ->fieldCondition('field_producer', 'uid', $user_uid, '=')
        ->execute();
      break;

    case 'director':
      $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $bundle_name)
        ->fieldCondition('field_director', 'uid', $user_uid, '=')
        ->execute();
      break;
  }

  
  return $result;
}

/**
 * User role check and make a link for all movies.
 */
function users_rolewise_link($user_object, $link) {

  $director = array_search('director', $user_object->roles);
  $producer = array_search('producer', $user_object->roles);
  $actor = array_search('actor', $user_object->roles);
  $actress = array_search('actress', $user_object->roles);

  if($actor == TRUE) {
    $link = l(t('View'), "$link/actor/$user_object->uid", array(
    'attributes' => array(
    'target' => '_blank')));
  }

  if($actress == TRUE) {
    $link = l(t('View'), "$link/actress/$user_object->uid", array(
    'attributes' => array(
    'target' => '_blank')));
  }

  if($producer == TRUE) {
    $link = l(t('View'), "$link/producer/$user_object->uid", array(
    'attributes' => array(
    'target' => '_blank')));
  }

  if($director == TRUE) {
   $link = l(t('View'), "$link/director/$user_object->uid",array(
    'attributes' => array(
    'target' => '_blank')));
  }

  return $link;
}

/**
 * Media Details Callback.
 */
function custom_media_details() {

  $form = array();
  $i = 1;
  $movies_array = array(''=>'select');
  extract($_GET);
  
   // Table Header. 
  $header = array(
    'Sr. No.',
    'Song Name' => array(
      'data' => '<img src="themes/bartik/images/music_icon.jpg" width="16px" height="16px" /> Song Name',
      'type' => 'property',
      'specifier' => 'title',
    ),
    'Movie' => array(
      'data' => t('Movie'),
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_movies',
        'column' => 'nid',
      ),
    ),
    'Movie description' => array(
      'data' => t('Movie description'),
    ),
    'Five star rating' => array(
      'data' => t('Five star rating'),
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_five_star_rating',
        'column' => 'rating',
      ),
    ),
  );

  $query = new EntityFieldQuery;

  // Get list of movies node 
  $movies = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'movie_information')
    ->execute();
  $movies_nid = array_keys($movies['node']);
  $movies_node = node_load_multiple($movies_nid);

  foreach($movies_node as $movies_key => $movies_result) {
    $movies_array[$movies_result->nid] = $movies_result->title;
  }

  // Query Build
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'songs_information');

  if (isset($movies_value_nid) && !empty($movies_value_nid)) {
    $query->fieldCondition('field_movies', 'nid', $movies_value_nid);
  }

  if (isset($song_name) && !empty($song_name)) {
    $query->propertyCondition('title', '%'. $song_name . '%', 'LIKE');
  }

  if (isset($fivestar_rating) && !empty($fivestar_rating)) {
    $query->fieldCondition('field_five_star_rating', 'rating', $fivestar_rating);
  }

  $query->tableSort($header);
  $result = $result->execute();

  if (!empty($result)) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $key => $value) {

      $movies_nid = $value->field_movies ? $value->field_movies['und'][0]['nid'] : '';
      $movies_object = node_load($movies_nid);
      $fivestar = field_view_field('node', $value, 'field_five_star_rating',array(
      'label'=>'hidden',));

      $rows[$value->nid] = array(
        $i,
        $value->title,
        $movies_object->title,
        field_key_check($movies_object, 'body'),
        render($fivestar),
      );
      $i++;
    }
  }

  if (empty($rows)) {
    $rows = array('empty'=>array('Sorry No Result Found'));
  }

  $form['song_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Song Name'),
    '#default_value' => '',
    '#ajax' => array(
      'callback' => 'custom_media_details_submit',
      'wrapper' => 'replace_textfield_div',
     ),
  );

  $form['movies'] = array(
    '#type' => 'select',
    '#title' => t('Movies'),
    '#options' => $movies_array,
    //'#attributes' => array('onChange' => 'document.getElementById("custom-media-details").submit();'),
    '#ajax' => array(
      'callback' => 'custom_media_details_submit',
      'wrapper' => 'replace_textfield_div',
     ),
  );

  $form['fivestar'] = array(
    '#type' => 'textfield',
    '#title' => t('Five star rating'),
    '#default_value' => '',
    //'#attributes' => array('onChange' => 'document.getElementById("custom-media-details").submit();'),
    '#ajax' => array(
      'callback' => 'custom_media_details_submit',
      'wrapper' => 'replace_textfield_div',
     ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('style' => 'display:none;'),
  );

  $form['table'] = array(
    '#theme' => 'table',
    '#prefix' => '<div id="replace_textfield_div">',
    '#suffix' => '</div>',
    '#title' => t('Media Details'),
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No Records.'),
  );

  return $form;
}

/**
 * Media Detail Page Callback.
 */
function custom_media_details_submit($form, &$form_state) {
  $values =  $form_state['values'];
  $song_name = $values['song_name'];
  $movies_nid = $values['movies'];
  $fivestar_rating = $values['fivestar'];

  $rows = array();
  $query = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'songs_information');

  if (!empty($movies_nid)) {
    $query->fieldCondition('field_movies', 'nid', $movies_nid);
  }

  if (!empty($song_name)) {
    $query->propertyCondition('title', '%'. $song_name . '%', 'LIKE');
  }

  if (!empty($fivestar_rating)) {
    $query->fieldCondition('field_five_star_rating', 'rating', $fivestar_rating);
  }

  //$query->tableSort($header);
  $result = $result->execute();

  if (!empty($result)) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $key => $value) {

      $movies_nid = $value->field_movies ? $value->field_movies['und'][0]['nid'] : '';
      $movies_object = node_load($movies_nid);
      $fivestar = field_view_field('node', $value, 'field_five_star_rating',array(
      'label'=>'hidden',));

      $rows[$value->nid] = array(
        $i,
        $value->title,
        $movies_object->title,
        field_key_check($movies_object, 'body'),
        render($fivestar),
      );
      $i++;
    }
  }

  if (empty($rows)) {
    $rows = array('empty'=>array('Sorry No Result Found'));
  }

  $form['table']['#rows'] = $rows ;

  return $form['table'];
}